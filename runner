#!/usr/bin/env bash
# The MIT License (MIT)
# Copyright (c) Happystack


# TODO üì¢
# ‚òëÔ∏è Make documentation
# ‚òëÔ∏è Add me!


##
# Failsafe settings.
##
set -o errexit # Exit on error.
set -o errtrace # Exit on error inside any functions or subshells.
set -o nounset # Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o pipefail # Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
# set -o xtrace
# Turn on traces, useful while debugging but commented out by default.


##
# Global constants.
##
# readonly MPATH='/usr/local/runner'
readonly MPATH='/Users/heinrich/Dropbox/Projects/happystack/runner'
readonly CURRENTPATH=$( pwd )
readonly EMPTY='‚ÄÄ'
readonly S='‚ÄÄ'
readonly GREEN='\e[32m'
readonly DEFAULTCOLOR='\e[39m'
readonly RED='\e[31m'
readonly PURPLE='\e[38;5;105m'
readonly DONESTATUS='Done'
readonly INPROGRESSSTATUS='In progress'
readonly FAILEDSTATUS='Failed'


# size
# readonly WIDTH="$(tput cols)"
readonly HEIGHT="$(tput lines)"


##
# Imports.
##
readonly row="${MPATH}/lib/table/row.sh"
readonly loader="${MPATH}/lib/loader/loader.sh"
readonly progressBar="${MPATH}/lib/progressBar/progressBar.sh"
readonly input="${MPATH}/lib/input/input.sh"
# shellcheck source=./lib/templates.sh
source "${MPATH}/lib/templates.sh"
# shellcheck source=./lib/helpers.sh
source "${MPATH}/lib/helpers.sh"
# shellcheck source=./lib/icons.sh
source "${MPATH}/lib/icons.sh"



##
# Constants
##
readonly start=`date +%s`


##
# Global variables
##√¶
currentStep=0
animationPID=''


##
# printTask
#
# @desc: return the step row according to its state
#
# @usage: printTask <task> [--default|--error|--progress|--done]
#
##
printTask() {
  local task="${1}"
  local content
  local leftContent
  local rightContent
  local middleContent
  local middleLength

  case $2 in
    --error)
      # left
      leftContent+="${ERRORICON} "
      leftContent+="${EMPTY}${RED}${task}"
      # right
      rightContent+="[${FAILEDSTATUS}]"
      # center
      middleLength=$(( WIDTH - ${#leftContent} - ${#rightContent} - 3 ))
      ;;
    --progress)
      # left
      leftContent+="${TIMEICON} "
      leftContent+="${EMPTY}${task}"
      # right
      rightContent+="${PURPLE}[${INPROGRESSSTATUS}]"
      # center
      middleLength=$(( WIDTH - ${#leftContent} - ${#rightContent} + 3 ))
      ;;
    --done)
      # left
      leftContent+="${SUCCESSICON} "
      leftContent+="${EMPTY}${GREEN}${task}"
      # right
      rightContent+="[${DONESTATUS}]"
      # center
      middleLength=$(( WIDTH - ${#leftContent} - ${#rightContent} - 3 ))
      ;;
    *)
      # left
      leftContent+="${ARROWICON} "
      leftContent+=" ${task}"
      # center
      middleLength=0
      ;;
  esac

  # middle dot to filled between left and right
  for (( k = 0; k < "${middleLength}"; k++ )); do
    middleContent+='.'
  done

  # build content
  content="${EMPTY}${EMPTY}${EMPTY}"
  content+="${leftContent}"
  content+="${middleContent}"
  content+="${rightContent}"


  printf "$( bash $row middle --content="${content}" --align='left' )"
}


##
# statusFooter
#
# @desc: append a status footer to the table
#
# @usage: statusFooter <time> [--success|--failure]
#
##
statusFooter() {
  local message
  local sound
  local time="${1}"

  case $2 in
    --success)
      message="üéâ${EMPTY}${EMPTY}Deployed in ${time} seconds!"
      sound='success.wav'
      ;;
    --failure)
      message="üí©${EMPTY}${EMPTY}Error log: cat /err.log. Ran in ${time} seconds!"
      sound='failure.wav'
      ;;
  esac

  printf '\n'
  removeLines 1
  printf "$( bash $row separator )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle --content="${message}" --align='center' )"
  printf "$( bash $row middle )"
  printf "$( bash $row bottom )"

  # BIB!
  sleep 0.2
  afplay "${MPATH}/sounds/${sound}" || paplay "${MPATH}/sounds/${sound}" || echo -ne '\007' &

  # place cursor to bottom
  tput cup "${HEIGHT}" 0

  # unhideCursor
  unhideCursor
}


##
# printTable
#
# @desc: print the table with all the tasks
#
# @usage: printTable
#
##
printTable() {
  local headerColumns=()
  local headerContent
  local padding=3

  # print header
  printf '\033[;H' || clear
  printf "$( templateHeader "$title" "${subtitle}" )"

  # table header
  headerContent+="${EMPTY}${EMPTY}${display}~"
  headerContentLength="$(( ${#headerContent} + padding - 1 ))"

  # add progress bar to headerContent
  local progressBarWidth=$(( WIDTH - headerContentLength - padding  ))
  progressContent="$( bash $progressBar "${progressBarWidth}" "${currentStep}" "${#tasks[*]}" )"
  headerContent+="${progressContent}~"

  # add table header columns
  headerColumns+=("${headerContentLength}")

  # print the table header rows
  printf "$( bash $row top --columns="${headerColumns[*]}" )"
  printf "$( bash $row middle --columns="${headerColumns[*]}" --content="${headerContent}" --align='left' )"
  printf "$( bash $row separator --columns="${headerColumns[*]}" --up )"
  printf "$( bash $row middle )"

  # body
  for (( i = 0; i < "${#tasks[*]}"; i++ )); do
    if [[ $i = "${currentStep}" ]]; then
      if [[ $# -eq 1 && $1 = '--error' ]]; then
        printTask "${tasks[i]}" --error
      else
        printTask "${tasks[i]}" --progress
        # save cursor position
        tput sc
      fi
    else
      if [[ $i -lt $currentStep ]]; then
        printTask "${tasks[i]}" --done
      else
        printTask "${tasks[i]}" --default
      fi
    fi
    printf "$( bash $row middle )"
  done

  # footer
  printf "$( bash $row bottom )"
}


##
# startAnimation
#
# @desc: start the task progress animation
#
# @usage: startAnimation
#
##
startAnimation() {
  # restore cursor position to clock icon
  tput rc
  tput cub $(( WIDTH - 6 ))
  # animate the clock icon
  while sleep 0.2; do
    tput ech 1
    tput cub 1
    printf "${TIMESEQUENCE:i++%${#TIMESEQUENCE}:1}"
  done
}


getInput() {
  kill $animationPID 2>/dev/null
  animationPID='closed'
  tput cup $(( HEIGHT - 4 )) 0
  inputResult=''
  bash ${input} " ‚ö†Ô∏è  Current version is 0.3.1" "Bumb to version" inputResult 2>&1
  echo "${inputResult}"
} >$(tty)

##
# runTasks
#
# @desc: run a task
#
# @usage: runTask
#
##
runTasks() {
  # loop over all the tasks
  while [[ "${currentStep}" -lt $(( ${#tasks[*]} )) ]]; do
    # print the table
    printTable

    # start animation
    startAnimation &
    animationPID=$!
    disown

    local t="${tasksCommand[$currentStep]}"

    # run the current task and handle failure
    if $t > "$(pwd)/out.log" 2> "$(pwd)/err.log"; then
      # # stop animation
      if [[ "${animationPID}" != 'closed' ]]; then
        kill $animationPID 2>/dev/null
      fi
      # increment the current step
      currentStep=$(( $currentStep + 1 ))
    else
      # stop animation
      kill $animationPID 2>/dev/null

      # print error table
      printTable --error

      # print failure footer
      end=`date +%s`
      runtime=$((end-start))
      statusFooter $runtime --failure
      exit 0
    fi
  done
}


##
# launch
#
# @desc: launch the screen
#
# @usage: launch
#
##
launch() {
  # # start loader
  # bash "${loader}" &
  # loaderPID=$!
  # disown
  # # totally useless for now but damn cool
  # sleep 1.5
  # # stop loader
  # kill $loaderPID 2>/dev/null

  # set display, title and subtitle
  display="${EMPTY}"
  title='HAPPYSTACK üèÉüèº'
  subtitle='Tasks Runner'

  # import tasks
  # shellcheck source=./tasks.sh
  source "${CURRENTPATH}/${taskPath}"

  # init the screen
  hideCursor
  tput cup 0 0
  clear
}


##
# init
#
# @desc: generate a basic runner tasks file
#
# @usage: init
#
##
init() {
  # duplicate sample task to current path
  cp "${MPATH}/tasks[sample].sh" "${CURRENTPATH}/tasks[sample].sh"
  # print success
  printf "\nüéâ${EMPTY} Sample task file generated!\n\n"
  # BIB!
  sleep 0.2
  afplay "${MPATH}/sounds/success.wav" || paplay "${MPATH}/sounds/success.wav" || echo -ne '\007' &
  exit 0
}


##
# update
#
# @desc: update the script from git
#
# @usage: update
#
##
update() {
  # start loader
  bash "${loader}" &
  loaderPID=$!
  disown

  # update
  if bash "${MPATH}/install.sh" > "$(pwd)/out.log" 2> "$(pwd)/err.log"; then
    # stop loader
    kill $loaderPID 2>/dev/null
    # print success
    clear
    printf "\nüéâ${EMPTY} Updated!\n\n"
    # unhideCursor
    unhideCursor
    # BIB!
    sleep 0.2
    afplay "${MPATH}/sounds/success.wav" || paplay "${MPATH}/sounds/success.wav" || echo -ne '\007' &
    exit 0
  else
    # stop loader
    kill $loaderPID 2>/dev/null
    # print failure
    clear
    printf "\n‚ùå${EMPTY} An error occured, try to update with privileges: sudo runner update\n\n"
    # unhideCursor
    unhideCursor
    # BIB!
    sleep 0.2
    afplay "${MPATH}/sounds/failure.wav" || paplay "${MPATH}/sounds/failure.wav" || echo -ne '\007' &
    exit 1
  fi
}


##
# uninstall
#
# @desc: remove Runner from system
#
# @usage: uninstall
#
##
uninstall() {
  # read confirmation from user
  read -r -p "Do you want to uninstall üèÉ Runner? [y/n]: " response
  case $response in
      [yY][eE][sS]|[yY])
        # remove runner folder  and symlink
        sudo rm -rf ${MPATH} 2>/dev/null
        sudo rm -f "/usr/local/bin/runner" 2>/dev/null
        # print success
        printf "\nüèÉüèæ${EMPTY} Runner uninstalled, good bye!\n\n"
        exit 0
        ;;
      *)
        printf "\nUninstall cancelled!\n\n"
        exit 0
        ;;
    esac
}


##
# help
#
# @desc: print the help menu
#
# @usage: help
#
##
help() {
  local columns=('0')
  local line1="${S}${S}usage: ${S}runner COMMANDS [OPTIONS] [help]~"
  local line2="${S}${S}${S}${S}COMMANDS:~"
  local line3="${S}${S}${S}${S}${S}${S}${PURPLE}<init>${DEFAULTCOLOR} ${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S} generate tasks file~"
  local line4="${S}${S}${S}${S}${S}${S}${PURPLE}<tasks file> <version>${DEFAULTCOLOR} ${S}${S}${S} ex: ./tasks.sh 0.0.0~"
  local line5="${S}${S}${S}${S}${S}${S}${PURPLE}<update>${DEFAULTCOLOR} ${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S} update to latest~"
  local line6="${S}${S}${S}${S}${S}${S}${PURPLE}<uninstall>${DEFAULTCOLOR} ${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S}${S} remove üèÉ~"

  # print header
  clear
  printf "$( templateHeader 'HAPPYSTACK üèÉüèº' 'Help' )"
  # print help menu
  printf "$( bash $row top )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line1}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row separator )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line2}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line3}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line4}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line5}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row middle  --content="${line6}" --align='left' )"
  printf "$( bash $row middle )"
  printf "$( bash $row bottom )"

  # place cursor to bottom
  tput cup "${HEIGHT}" 0
}


##
# main
#
# @desc: configure and run the task runner
#
# @usage: main <taskPath>
#
##
main() {
  # help
  if [[ "${#@}" = 0 || $1 = 'help' ]]; then
    help
    exit 0
  fi

  # catch init command
  case $1 in
    init)
      init
      ;;
    update)
      update
      ;;
    uninstall)
      uninstall
      ;;
  esac


  # Variables
  local taskPath=$1

  # init the screen
  launch

  # run tasks
  runTasks

  # success finish
  currentStep=$(( $currentStep + 1 ))
  printTable

  # print success footer
  end=`date +%s`
  runtime=$((end-start))
  statusFooter $runtime --success

  # exit program
  exit 0
}


# Call `main` after everything has been defined.
main "$@"
